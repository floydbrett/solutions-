/*******************************************************

There is a singly-linked list head and we want to delete a node node in it.

You are given the node to be deleted node. You will not be given access to the first node of head.

All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.

Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:

The value of the given node should not exist in the linked list.
The number of nodes in the linked list should decrease by one.
All the values before node should be in the same order.
All the values after node should be in the same order.

Topics:
Linked List

********************************************************/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
    
        ListNode* dummy;

        //Because we don't have access to the head of the list we will "delete" the node by shifting all node values back one node

        //while there exists a node we make each node equivalent to the next node in line
        while(node->next){
            node->val = node->next->val;
            dummy = node;
            node = node->next;
        }

        //after reaching next to last node we set pointer to last node to NULL
        dummy->next = NULL;
    }
};
