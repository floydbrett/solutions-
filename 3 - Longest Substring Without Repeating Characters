/*********************************************************

Given a string s, find the length of the longest 
substring without repeating characters.

Topics:
Hash Table, Sliding Window, Strings

*********************************************************/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {

        //return 0 if there is no string
        if(s.size() == 0)
            return 0;

        //hash table to keep tracker of frequency of letters
        unordered_map<char, int> m;
        int i = 0, j = 0, ans = 0;

        //parse through entire string
        while(j < s.size()){

            //increase frequency of latest letter by 1, if no repeats check size against largest so far, if repeats take away the first letters until no repeats
            m[s[j]]++;
            if(m.size() == j-i+1){    //j-i-1 gets size of current string, then compares with number of elements in hash table, if sizes are the same there are no repeats
                ans = max(ans, j-i+1);
            }  
            else if(m.size() < j-i+1){

                while(m.size() < j-i+1){
                    m[s[i]]--;
                    if(m[s[i]] == 0){
                        m.erase(s[i]);
                    }
                    i++;
                }
            }

            j++;
        }
        return ans;
    }
};
