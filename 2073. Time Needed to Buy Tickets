/*************************************************************

There are n people in a line queuing to buy tickets, where the 0th person is at the 
front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets
that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time
and has to go back to the end of the line (which happens instantaneously) in order to buy more
tickets. If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

Topics:
Array

***************************************************************/

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        
        int max = tickets[k];
        int count = 0;

        //buyers in front of k can only buy at most the same amount of tickets as k
        //use min function to get number of tickets they buy before k finishes buying
        for(int i = 0; i < k; i++){
            count += min(tickets[i], tickets[k]);
        }

        //buyers behind k can only buy at most one less ticket than k
        //use min function again but use number of tickets k buys - 1
        for(int i = k + 1; i < tickets.size(); i++){
            count+= min(tickets[i], tickets[k]-1);
        }

        //add number of tickets k buys
        count += tickets[k];
        
        return count;
    }
};
